// <%= page.name %>Form.tsx

import React from 'react';
import { useForm } from 'react-hook-form';
import { useMutation, useQueryClient } from 'react-query';
import api from '../../api';
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

const create<%= page.entity.name %> = async (data: any) => {
  const { data: response } = await api.post(`/api/<%= page.entity.name.toLowerCase() %>s`, data);
  return response;
};

export function <%= page.name %>Form() {
  const queryClient = useQueryClient();
  const { register, handleSubmit, formState: { errors } } = useForm();
  const mutation = useMutation(create<%= page.entity.name %>, {
    onSuccess: () => {
      queryClient.invalidateQueries('<%= page.entity.name.toLowerCase() %>s');
    },
  });

  const onSubmit = (data: any) => {
    mutation.mutate(data);
  };

  return (
    <Card className="w-[350px]">
      <CardHeader>
        <CardTitle>Create <%= page.entity.name %></CardTitle>
        <CardDescription>
          Create a new <%= page.entity.name.toLowerCase() %>.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="grid w-full items-center gap-4">
            <% for (const field of page.entity.fields) { %>
              <% if (field.name !== 'id' && !field.isPassword) { %>
            <div className="flex flex-col space-y-1.5" key="<%= field.name %>">
              <Label htmlFor="<%= field.name %>"><%= field.name %></Label>
              <Input
                id="<%= field.name %>"
                type="<%= field.isPassword ? 'password' : 'text' %>"
                {...register("<%= field.name %>", { required: true })}
              />
              {errors["<%= field.name %>"] && (
                <span className="text-red-500 text-xs">This field is required</span>
              )}
            </div>
              <% } %>
            <% } %>
          </div>
          <Button type="submit" className="mt-4" disabled={mutation.isLoading}>
            {mutation.isLoading ? 'Creating...' : 'Create'}
          </Button>
          {mutation.isError && (
            <div className="text-red-500 mt-2">Error creating <%= page.entity.name.toLowerCase() %>. Please try again.</div>
          )}
          {mutation.isSuccess && (
            <div className="text-green-600 mt-2">Successfully created!</div>
          )}
        </form>
      </CardContent>
    </Card>
  );
}
