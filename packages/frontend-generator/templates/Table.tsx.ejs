// <%= page.name %>Table.tsx

import React from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import api from '../../api';
import { MoreHorizontal, Pencil, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

<%
  const entityName = page.entity.name || 'Item';
%>

const fetch<%= entityName %>s = async () => {
  const { data } = await api.get(`/api/<%= entityName.toLowerCase() %>s`);
  return data;
};

const delete<%= entityName %> = async (id: string) => {
  await api.delete(`/api/<%= entityName.toLowerCase() %>s/${id}`);
};

export function <%= page.name %>Table() {
  const queryClient = useQueryClient();
  const { data, isLoading, error } = useQuery(
    '<%= entityName.toLowerCase() %>s',
    fetch<%= entityName %>s
  );
  const mutation = useMutation(delete<%= entityName %>, {
    onSuccess: () => {
      queryClient.invalidateQueries('<%= entityName.toLowerCase() %>s');
    },
  });

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error loading data</div>;

  return (
    <Card>
      <CardHeader>
        <CardTitle>
          <%= page.title || entityName + 's' %>
        </CardTitle>
        <CardDescription>
          Manage your <%= entityName.toLowerCase() %>s.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <% for (const field of page.entity.fields) { %>
                <% if (field.name !== 'id' && !field.isPassword) { %>
              <TableHead key="<%= field.name %>"><%= field.name %></TableHead>
                <% } %>
              <% } %>
              <TableHead>
                <span className="sr-only">Actions</span>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data && data.map((item: any) => (
              <TableRow key={item.id}>
                <% for (const field of page.entity.fields) { %>
                  <% if (field.name !== 'id' && !field.isPassword) { %>
                <TableCell key="<%= field.name %>">{item["<%= field.name %>"]}</TableCell>
                  <% } %>
                <% } %>
                <TableCell>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        aria-haspopup="true"
                        size="icon"
                        variant="ghost"
                      >
                        <MoreHorizontal className="h-4 w-4" />
                        <span className="sr-only">Toggle menu</span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuLabel>Actions</DropdownMenuLabel>
                      <DropdownMenuItem>
                        <Pencil className="mr-2 h-4 w-4" />
                        Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => mutation.mutate(item.id)}>
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
