// <%= page.name %>Table.tsx

import React from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import api from '../../api';
import { MoreHorizontal, Pencil, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
} from "@/components/ui/dropdown-menu";
import {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableRow,
  TableHead,
  TableCell,
} from "@/components/ui/table";

<%
  const entityName = page.entity.name || 'Item';
%>

const fetch<%= entityName %>s = async () => {
  const { data } = await api.get(`/api/<%= entityName.toLowerCase() %>s`);
  return data;
};

const delete<%= entityName %> = async (id: string) => {
  await api.delete(`/api/<%= entityName.toLowerCase() %>s/${id}`);
};

export function <%= page.name %>Table() {
  const queryClient = useQueryClient();
  const { data, error, isLoading } = useQuery(['<%= entityName.toLowerCase() %>s'], fetch<%= entityName %>s);
  const mutation = useMutation(delete<%= entityName %>, {
    onSuccess: () => {
      queryClient.invalidateQueries('<%= entityName.toLowerCase() %>s');
    },
  });

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">Error loading table.</div>;

  return (
    <Card>
      <CardHeader>
        <CardTitle><%= entityName %>s</CardTitle>
        <CardDescription>List of <%= entityName.toLowerCase() %>s</CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <% page.entity.fields.forEach(field => { %>
              <TableHead><%= field.name %></TableHead>
              <% }) %>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((item) => (
              <TableRow key={item.id}>
                {/* Render fields */}
                <% page.entity.fields.forEach(field => { %>
                <TableCell>{item.<%= field.name %>}</TableCell>
                <% }) %>
                <TableCell>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="icon">
                        <MoreHorizontal size={20} />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent>
                      <DropdownMenuLabel>Actions</DropdownMenuLabel>
                      <DropdownMenuItem asChild>
                        <Button variant="outline" size="sm">
                          <Pencil size={16} /> Edit
                        </Button>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Button variant="destructive" size="sm" onClick={() => mutation.mutate(item.id)}>
                          <Trash2 size={16} /> Delete
                        </Button>
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
