<%- pages.filter(page => page.type === 'table').map(page => {
  const entityName = page.entity || 'Item';
  const endpoint = page.entity ? page.entity.toLowerCase() + 's' : 'items';
  
  return `import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import api from '../api';

interface ${entityName} {
  id: string;
${page.props?.columns?.map(col => `  ${col.field}: ${col.type || 'any'};`).join('\n') || '  // Define entity fields here based on your model'}
}

export function ${page.name}Table() {
  const [data, setData] = useState<${entityName}[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const pageSize = 10;

  const fetchData = async (page = 1) => {
    try {
      setLoading(true);
      const response = await api.get<{ data: ${entityName}[], total: number, pages: number }>(\`/api/${endpoint}?page=\${page}&limit=\${pageSize}\`);
      setData(response.data.data);
      setTotalPages(response.data.pages || Math.ceil(response.data.total / pageSize) || 1);
      setError(null);
    } catch (err) {
      console.error('Error fetching data:', err);
      setError('Failed to load data. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData(currentPage);
  }, [currentPage]);

  const handleDelete = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this item?')) {
      try {
        await api.delete(\`/api/${endpoint}/\${id}\`);
        // Refresh data after deletion
        fetchData(currentPage);
      } catch (err) {
        console.error('Error deleting item:', err);
        setError('Failed to delete item. Please try again.');
      }
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  if (loading && !data.length) {
    return <div className="loading">Loading...</div>;
  }

  if (error) {
    return <div className="error">{error}</div>;
  }

  return (
    <div>
      <div className="main-header">
        <h1 className="page-title">${page.title || entityName + 's'}</h1>
        <Link to="${page.route.replace('list', 'new') || '/new-' + entityName.toLowerCase()}">
          <button>Add New ${entityName}</button>
        </Link>
      </div>

      <div className="table-container">
        <table>
          <thead>
            <tr>
              ${page.props?.columns?.map(col => `<th>${col.label || col.field}</th>`).join('\n              ') || `<th>ID</th>\n              <th>Created</th>\n              <th>Actions</th>`}
            </tr>
          </thead>
          <tbody>
            {data.length > 0 ? (
              data.map((item) => (
                <tr key={item.id}>
                  ${page.props?.columns?.map(col => `<td>{item.${col.field}}</td>`).join('\n                  ') || `<td>{item.id}</td>\n                  <td>{new Date(item.createdAt).toLocaleString()}</td>`}
                  <td>
                    <div style={{ display: 'flex', gap: '8px' }}>
                      <Link to={\`${page.route.replace('list', 'detail')}?id=\${item.id}\`}>
                        <button>View</button>
                      </Link>
                      <Link to={\`${page.route.replace('list', 'edit')}?id=\${item.id}\`}>
                        <button className="secondary">Edit</button>
                      </Link>
                      <button 
                        className="danger"
                        onClick={() => handleDelete(item.id)}
                      >
                        Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={${page.props?.columns?.length || 3}} style={{ textAlign: 'center' }}>
                  No data available
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {totalPages > 1 && (
        <div className="pagination">
          <button
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
          >
            Previous
          </button>
          <span>
            Page {currentPage} of {totalPages}
          </span>
          <button
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
}`;
}).join('\n\n') %}
