import React from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate, Outlet } from 'react-router-dom';
<% if (authProvider === 'clerk') { %>
import { useAuth, UserButton } from '@clerk/clerk-react';
<% } else if (authProvider === 'auth0') { %>
import { useAuth0 } from '@auth0/auth0-react';
<% } else if (authProvider === 'jwt') { %>
import { useAuth } from './hooks/useAuth';
<% } %>
import Layout from './components/Layout';

<% pages.forEach(page => { %>
import <%= page.name %>Table from "./<%= page.name %>Table"
import <%= page.name %>Form from "./<%= page.name %>Form"
import <%= page.name %>Details from "./<%= page.name %>Details"
<% }) %>

// A wrapper for routes that require authentication and authorization.
function ProtectedRoute({ permissions = [] }) {
  <% if (authProvider === 'clerk') { %>
  const { isSignedIn, user } = useAuth();
  if (!isSignedIn) {
    return <Navigate to="/login" replace />;
  }
  const userRole = user?.publicMetadata?.role;
  if (permissions.length > 0 && (!userRole || !permissions.includes(userRole))) {
    return <Navigate to="/unauthorized" replace />;
  }
  <% } else if (authProvider === 'auth0') { %>
  const { isAuthenticated, user } = useAuth0();
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }
  const userRoles = user?.['https://your-namespace.com/roles'] || []; // Replace with your Auth0 namespace
  if (permissions.length > 0 && !permissions.some(p => userRoles.includes(p))) {
    return <Navigate to="/unauthorized" replace />;
  }
  <% } else if (authProvider === 'jwt') { %>
  const { token, user } = useAuth();
  if (!token) {
    return <Navigate to="/login" replace />;
  }
  // Assuming user object from JWT payload has a 'roles' array
  const userRoles = user?.roles || [];
  if (permissions.length > 0 && !permissions.some(p => userRoles.includes(p))) {
    return <Navigate to="/unauthorized" replace />;
  }
  <% } else { %>
  // If no auth provider, all routes are public
  <% } %>
  
  return <Outlet />;
}

export function App() {
  // Example auth logic
  <% if (authProvider === 'clerk') { %>
  const { isSignedIn } = useAuth();
  <% } else if (authProvider === 'auth0') { %>
  const { isAuthenticated } = useAuth0();
  <% } else if (authProvider === 'jwt') { %>
  const { user } = useAuth();
  <% } %>

  return (
    <Router>
      <Layout>
        <Routes>
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          <Route path="/dashboard" element={<div>Dashboard Content</div>} />
          
          {/* Generated protected routes */}
          <% pages.forEach(page => { %>
          <Route element={<ProtectedRoute permissions={<%- JSON.stringify(page.permissions || []) %>} />}>
            <Route path="<%= page.route %>" element={<%= page.type === 'table' ? `<${page.name}Table />` : page.type === 'form' ? `<${page.name}Form />` : `<${page.name}Details />` %>} />
          </Route>
          <% }); %>

          {/* Auth-related routes */}
          <Route path="/login" element={<div>Login Page</div>} />
          <Route path="/unauthorized" element={<div>Unauthorized Page</div>} />
          <Route path="*" element={<Navigate to="/dashboard" />} />
        </Routes>
      </Layout>
    </Router>
  );
}
