// <%= page.name %>Details.tsx

import React, { useState } from 'react';
import { useQuery } from 'react-query';
import { useParams, useNavigate, Link } from 'react-router-dom';
import api from '../../api';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from '@/components/ui/button';

const fetch<%= page.entity.name %> = async (id: string) => {
  const { data } = await api.get(`/api/<%= page.entity.name.toLowerCase() %>s/${id}`);
  return data;
};

export function <%= page.name %>Details() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  const { data, isLoading, error } = useQuery(
    ['<%= page.entity.name.toLowerCase() %>', id],
    () => fetch<%= page.entity.name %>(id!),
    { enabled: !!id }
  );

  const handleDelete = async () => {
    if (!id) return;
    if (window.confirm('Are you sure you want to delete this item?')) {
      try {
        await api.delete(`/api/<%= page.entity.name.toLowerCase() %>s/${id}`);
        navigate('<%= page.route.replace("details", "list") %>');
      } catch (err) {
        setErrorMsg('Failed to delete item. Please try again.');
      }
    }
  };

  if (isLoading) return <div>Loading...</div>;
  if (error || errorMsg) return <div>Error loading data{errorMsg ? `: ${errorMsg}` : ''}</div>;
  if (!data) return <div>No data found.</div>;

  return (
    <div>
      <div className="main-header flex items-center justify-between mb-6">
        <h1 className="page-title text-2xl font-bold">
          <%= page.entity.name %> Details
        </h1>
        <div className="actions flex gap-2">
          <Link to={`<%= page.route.replace("details", "edit") %>?id=${id}`}>
            <Button variant="secondary">Edit</Button>
          </Link>
          <Button variant="destructive" onClick={handleDelete}>
            Delete
          </Button>
          <Button variant="secondary" onClick={() => navigate('<%= page.route.replace("details", "list") %>')}>
            Back to List
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>
            {data.name || data.title || data.id}
          </CardTitle>
          <CardDescription>
            Details for <%= page.entity.name.toLowerCase() %> {data.id}.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4">
            <% for (const field of page.entity.fields) { %>
              <% if (field.name !== 'id' && !field.isPassword) { %>
            <div key="<%= field.name %>">
              <p className="font-semibold"><%= field.name %></p>
              <p>{data["<%= field.name %>"]}</p>
            </div>
              <% } %>
            <% } %>
          </div>
          <Button className="mt-4" onClick={() => navigate(-1)}>
            Back
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}
