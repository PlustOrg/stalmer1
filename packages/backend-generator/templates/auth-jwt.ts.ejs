import { Injectable, UnauthorizedException, BadRequestException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { PrismaService } from '../prisma/prisma.service';
import * as bcrypt from 'bcrypt';

@Injectable()
export class AuthService {
  constructor(
    private readonly jwtService: JwtService,
    private readonly prisma: PrismaService
  ) {}

  /**
   * Validates a user's credentials
   * @param email - The user's email
   * @param password - The user's password
   * @returns The user object if credentials are valid, otherwise null
   */
  async validateUser(email: string, password: string): Promise<any> {
    const user = await this.prisma.user.findUnique({ where: { email } });
    if (user && await bcrypt.compare(password, user.password)) {
      const { password, ...result } = user;
      return result;
    }
    return null;
  }

  /**
   * Generates JWT access and refresh tokens for a user
   * @param user - The user object
   * @returns An object with access_token and refresh_token
   */
  async login(user: any) {
    const payload = { sub: user.id, email: user.email };
    return {
      access_token: this.jwtService.sign(payload),
      // In a real app, you'd handle refresh tokens more securely (e.g., store them in a db)
      refresh_token: this.jwtService.sign(payload, { expiresIn: '7d' }),
    };
  }

  /**
   * Registers a new user
   * @param userData - The user's data for registration
   * @returns The newly created user object
   */
  async register(userData: { email: string; password: string; name?: string; }) {
    const existingUser = await this.prisma.user.findUnique({ where: { email: userData.email } });
    if (existingUser) {
      throw new BadRequestException('Email already in use');
    }
    
    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const newUser = await this.prisma.user.create({
      data: {
        ...userData,
        password: hashedPassword,
      },
    });
    const { password, ...result } = newUser;
    return result;
  }

  /**
   * Validates a JWT token
   * @param token - The JWT token to validate
   * @returns The decoded user data if token is valid, null otherwise
   */
  async validateToken(token: string): Promise<any> {
    try {
      const payload = this.jwtService.verify(token);
      // You might want to check if the user still exists in the DB
      return payload;
    } catch (e) {
      return null;
    }
  }
}
