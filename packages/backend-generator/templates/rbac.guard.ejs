import { CanActivate, ExecutionContext, Injectable, SetMetadata, ForbiddenException } from '@nestjs/common';
import { Reflector } from '@nestjs/core';

export const Roles = (...roles: string[]) => SetMetadata('roles', roles);

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<string[]>('roles', [
      context.getHandler(),
      context.getClass(),
    ]);
    if (!requiredRoles || requiredRoles.length === 0) {
      return true; // No roles required, access granted
    }
    
    const { user } = context.switchToHttp().getRequest();
    
    if (!user) {
      // This should ideally be caught by the AuthGuard first
      throw new ForbiddenException('Authentication credentials were not provided.');
    }

    // Assuming user object has a 'permissions' or 'roles' array.
    // Clerk uses 'permissions', Auth0 might use 'permissions' in custom claims.
    // Adjust 'user.permissions' to match your user object structure.
    const userRoles = user.permissions || user.roles || []; 
    
    const hasRole = () => requiredRoles.some((role) => userRoles.includes(role));

    if (!hasRole()) {
      throw new ForbiddenException('You do not have permission to perform this action.');
    }
    
    return true;
  }
}
