import { Controller, Get, Post, Put, Delete, Param, Body, UseGuards, NotFoundException, Patch, Request, UseInterceptors, ClassSerializerInterceptor } from '@nestjs/common';
import { <%= entity.name %>Service } from './<%= entity.name.toLowerCase() %>.service';
<% if (rbac) { %>import { RolesGuard, Roles } from '../rbac.guard';<% } %>
<% if (authProvider) { %>import { AuthGuard } from '@nestjs/passport';<% } %>

@Controller('<%= entity.name.toLowerCase() %>s')
@UseInterceptors(ClassSerializerInterceptor)
<% if (authProvider) { %>@UseGuards(AuthGuard('<%= authProvider === "jwt" ? "jwt" : authProvider %>'))<% } %>
<% if (rbac) { %>@UseGuards(RolesGuard)<% } %>
export class <%= entity.name %>Controller {
  constructor(private readonly <%= entity.name.toLowerCase() %>Service: <%= entity.name %>Service) {}

  @Get()
  <% if (permissions[entity.name] && permissions[entity.name].find) { %>@Roles(<%- JSON.stringify(permissions[entity.name].find) %>)<% } %>
  findAll() {
    return this.<%= entity.name.toLowerCase() %>Service.findAll();
  }

  @Get(':id')
  <% if (permissions[entity.name] && permissions[entity.name].find) { %>@Roles(<%- JSON.stringify(permissions[entity.name].find) %>)<% } %>
  async findOne(@Param('id') id: string) {
    const record = await this.<%= entity.name.toLowerCase() %>Service.findOne(id);
    if (!record) {
      throw new NotFoundException(`<%= entity.name %> with ID ${id} not found`);
    }
    return record;
  }

  @Post()
  <% if (permissions[entity.name] && permissions[entity.name].create) { %>@Roles(<%- JSON.stringify(permissions[entity.name].create) %>)<% } %>
  create(@Body() create<%= entity.name %>Dto: any) { // Replace 'any' with a proper DTO class
    return this.<%= entity.name.toLowerCase() %>Service.create(create<%= entity.name %>Dto);
  }

  @Patch(':id')
  <% if (permissions[entity.name] && permissions[entity.name].update) { %>@Roles(<%- JSON.stringify(permissions[entity.name].update) %>)<% } %>
  update(@Param('id') id: string, @Body() update<%= entity.name %>Dto: any) { // Replace 'any' with a proper DTO class
    return this.<%= entity.name.toLowerCase() %>Service.update(id, update<%= entity.name %>Dto);
  }

  @Delete(':id')
  <% if (permissions[entity.name] && permissions[entity.name].delete) { %>@Roles(<%- JSON.stringify(permissions[entity.name].delete) %>)<% } %>
  remove(@Param('id') id: string) {
    return this.<%= entity.name.toLowerCase() %>Service.remove(id);
  }
}

<% if (authProvider === 'jwt') { %>
@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  async login(@Body() req) {
    const user = await this.authService.validateUser(req.email, req.password);
    if (!user) {
      throw new NotFoundException('Invalid credentials');
    }
    return this.authService.login(user);
  }

  @Post('register')
  async register(@Body() req) {
    return this.authService.register(req);
  }
}
<% } %>
