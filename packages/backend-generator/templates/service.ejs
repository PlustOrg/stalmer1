import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
<% const hasPasswordField = entity.fields.some(f => f.isPassword); %>
<% if (hasPasswordField) { %>import * as bcrypt from 'bcrypt';<% } %>
import { <%= entity.name %> } from '@prisma/client';

@Injectable()
export class <%= entity.name %>Service {
  constructor(private readonly prisma: PrismaService) {}

  async findAll(): Promise<<%= entity.name %>[]> {
    return this.prisma.<%= entity.name.toLowerCase() %>.findMany();
  }

  async findOne(id: string): Promise<<%= entity.name %> | null> {
    return this.prisma.<%= entity.name.toLowerCase() %>.findUnique({ where: { id } });
  }

  async create(data: Omit<<%= entity.name %>, 'id' | 'createdAt' | 'updatedAt'>): Promise<<%= entity.name %>> {
    <% for (const field of entity.fields) { %>
      <% if (field.isPassword) { %>
    if (data.<%= field.name %>) {
      data.<%= field.name %> = await bcrypt.hash(data.<%= field.name %>, 10);
    }
      <% } %>
    <% } %>
    return this.prisma.<%= entity.name.toLowerCase() %>.create({ data });
  }

  async update(id: string, data: Partial<Omit<<%= entity.name %>, 'id' | 'createdAt' | 'updatedAt'>>): Promise<<%= entity.name %>> {
    <% for (const field of entity.fields) { %>
      <% if (field.isPassword) { %>
    if (data.<%= field.name %>) {
      data.<%= field.name %> = await bcrypt.hash(data.<%= field.name %>, 10);
    }
      <% } %>
    <% } %>
    return this.prisma.<%= entity.name.toLowerCase() %>.update({
      where: { id },
      data,
    });
  }

  async remove(id: string): Promise<<%= entity.name %>> {
    return this.prisma.<%= entity.name.toLowerCase() %>.delete({ where: { id } });
  }
}
