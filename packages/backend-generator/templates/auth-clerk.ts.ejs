import { Injectable, OnModuleInit } from '@nestjs/common';
import { Clerk } from '@clerk/clerk-sdk-node';

@Injectable()
export class ClerkAuthService implements OnModuleInit {
  private readonly clerk: any;

  constructor() {
    // Initialize Clerk SDK
    if (!process.env.CLERK_SECRET_KEY) {
      throw new Error('CLERK_SECRET_KEY environment variable not set');
    }
    this.clerk = Clerk({ secretKey: process.env.CLERK_SECRET_KEY });
  }

  async onModuleInit() {
    // You can add a health check here to ensure Clerk is configured correctly
    try {
      await this.clerk.users.getUserList({ limit: 1 });
      console.log('Clerk SDK connected successfully.');
    } catch (error) {
      console.error('Failed to connect to Clerk API:', error);
    }
  }

  /**
   * Validates a Clerk JWT token from the Authorization header
   * @param authorizationHeader - The 'Bearer <token>' header
   * @returns The session claims if token is valid, null otherwise
   */
  async validateSession(authorizationHeader: string): Promise<any> {
    if (!authorizationHeader) {
      return null;
    }
    try {
      const token = authorizationHeader.replace('Bearer ', '');
      const session = await this.clerk.verifyToken(token);
      return session;
    } catch (error) {
      console.error('Clerk token validation error:', error);
      return null;
    }
  }

  /**
   * Gets user data from Clerk by ID
   * @param userId - The Clerk user ID
   * @returns The user object from Clerk
   */
  async getUserById(userId: string): Promise<any> {
    try {
      return await this.clerk.users.getUser(userId);
    } catch (error) {
      console.error(`Error fetching user ${userId} from Clerk:`, error);
      return null;
    }
  }
}
