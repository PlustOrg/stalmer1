import { Injectable } from '@nestjs/common';
// In a real app, you'd use a library like 'jwks-rsa' to fetch the signing key from Auth0
import * as jwt from 'jsonwebtoken';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class Auth0Service {
  constructor(
    private readonly prisma: PrismaService
  ) {}

  /**
   * Validates an Auth0 JWT token
   * @param token - The JWT token to validate
   * @returns The decoded user data if token is valid, null otherwise
   */
  async validateToken(token: string): Promise<any> {
    try {
      // In a real app, you would fetch the public key from Auth0's JWKS endpoint
      // and use it to verify the token signature.
      // For simplicity, we'll just decode it here.
      const decoded: any = jwt.decode(token);
      if (!decoded || !decoded.sub) {
        return null;
      }
      
      // Find or create a user in the local database
      const user = await this.findOrCreateUser(decoded.sub, decoded);
      return user;
    } catch (error) {
      console.error('Auth0 token validation error:', error);
      return null;
    }
  }

  /**
   * Finds an existing user or creates a new one based on Auth0 ID
   * @param auth0Id - The Auth0 user ID
   * @param userData - Additional user data from the token
   * @returns The user from the database
   */
  private async findOrCreateUser(auth0Id: string, userData: any): Promise<any> {
    const existingUser = await this.prisma.user.findUnique({
      where: { auth0Id },
    });

    if (existingUser) {
      return existingUser;
    }

    // Customize this part based on your User model in schema.prisma
    const newUser = await this.prisma.user.create({
      data: {
        auth0Id,
        email: userData.email,
        name: userData.name,
        // Add other fields as needed
      },
    });

    return newUser;
  }
}
