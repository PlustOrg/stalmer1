import { CanActivate, ExecutionContext, Injectable, SetMetadata } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
<% if (authProvider === 'clerk') { %>
import { ClerkAuthService } from './auth.clerk';
<% } else if (authProvider === 'auth0') { %>
import { Auth0Service } from './auth.auth0';
<% } else { %>
import { JwtAuthService } from './auth.jwt';
<% } %>

export const Roles = (...roles: string[]) => SetMetadata('roles', roles);

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(
    private reflector: Reflector,
<% if (authProvider === 'clerk') { %>
    private authService: ClerkAuthService
<% } else if (authProvider === 'auth0') { %>
    private authService: Auth0Service
<% } else { %>
    private authService: JwtAuthService
<% } %>
  ) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const requiredRoles = this.reflector.get<string[]>('roles', context.getHandler());
    
    // If no roles are required, allow access
    if (!requiredRoles || requiredRoles.length === 0) {
      return true;
    }
    
    const request = context.switchToHttp().getRequest();
    const token = request.headers.authorization;
    
    if (!token) {
      return false;
    }
    
    // Validate token and get user data
    const user = await this.authService.validateToken(token);
    
    if (!user) {
      return false;
    }
    
    // Store user data in request for controllers
    request.user = user;
    
    // Check if user has required role
    return requiredRoles.some(role => user.roles?.includes(role));
  }
}
